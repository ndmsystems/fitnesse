import com.amazonaws.auth.*
import com.amazonaws.auth.profile.*

buildscript {
	repositories {
		mavenCentral()
	}
	
	dependencies {
		classpath 'com.amazonaws:aws-java-sdk-core:1.11.5'
	}
}


plugins {
	id 'java'
	id "maven-publish"
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
group = 'com.ndm'


task incrementVersion {
	doFirst {
		def pFile = file('gradle.properties')
		def Properties vProps = new Properties()

		vProps.load(new FileInputStream(pFile))
		def mv = vProps['minorVersion'].toInteger() + 1
		vProps['minorVersion'] = mv.toString()
		vProps.store(pFile.newWriter(), null)
	}
  
	version = "$majorVersion.$minorVersion"
}


repositories {
	mavenCentral()
	
	maven {
		url 'http://s3.eu-central-1.amazonaws.com/fitnesse-packages'
	}
}


configurations {
	lesscss
	optional
	compile {
		transitive = false
		extendsFrom optional
	}
	runtime {
		transitive = false
	}
}


sourceSets {
	main {
		java.srcDir 'src'
		resources.srcDir 'src'
		output.resourcesDir java.outputDir
	}
}


dependencies {
	compile "org.htmlparser:htmlparser:2.1"
	compile "org.htmlparser:htmllexer:2.1"
	compile ("org.apache.velocity:velocity:1.7") {
		exclude group:"commons-collections", module: "commons-collections"
		exclude group:"commons-lang", module: "commons-lang"
	}
	compile "commons-lang:commons-lang:2.6"
	compile "commons-collections:commons-collections:3.2.2"
	compile "org.json:json:20151123"
	compile "com.googlecode.java-diff-utils:diffutils:1.3.0"
	optional "org.apache.ant:ant:1.9.6"
	optional "junit:junit:4.12"

	testCompile "junit:junit:4.12"
	testCompile "org.mockito:mockito-core:1.10.19"
	testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile "net.javacrumbs.json-unit:json-unit:1.1.6"

	lesscss "org.mozilla:rhino:1.7.7.1"
}


task fitNesseVersion {
	def versionFile = new File("${sourceSets.main.output.resourcesDir}/META-INF/FitNesseVersion.txt")
	versionFile.parentFile.mkdirs()
	versionFile.text="v${version}"
}


task compileBootstrap(type: LessCompiler) {
	inputDir file('src/fitnesse/resources/bootstrap/less')
	mainLessFile = 'fitnesse-bootstrap.less'
	cssFile file("${sourceSets.main.output.resourcesDir}/fitnesse/resources/bootstrap/css/fitnesse-bootstrap.css")
	classpath configurations.lesscss
}


task createUpdateLists(type: WikiFileListBuilderTask) {
	outputDirectory = "${sourceSets.main.output.resourcesDir}/Resources"

	files = {
		// Make sure only files in version control are added to the default wiki contents
    "git ls-files FitNesseRoot".execute().text.readLines()
	}

	doNotReplaceFiles = [
    "FitNesseRoot/content.txt",
    "FitNesseRoot/properties.xml",
    "FitNesseRoot/FrontPage/content.txt",
    "FitNesseRoot/FrontPage/properties.xml",
    "FitNesseRoot/PageHeader/content.txt",
    "FitNesseRoot/PageHeader/properties.xml",
    "FitNesseRoot/PlugIns/content.txt",
    "FitNesseRoot/PlugIns/properties.xml",
    "FitNesseRoot/PageFooter/content.txt",
    "FitNesseRoot/PageFooter/properties.xml",
    "FitNesseRoot/TemplateLibrary/content.txt",
    "FitNesseRoot/TemplateLibrary/properties.xml",
    "FitNesseRoot/TemplateLibrary/StaticPage/content.txt",
    "FitNesseRoot/TemplateLibrary/StaticPage/properties.xml",
    "FitNesseRoot/TemplateLibrary/SuitePage/content.txt",
    "FitNesseRoot/TemplateLibrary/SuitePage/properties.xml",
    "FitNesseRoot/TemplateLibrary/TestPage/content.txt",
    "FitNesseRoot/TemplateLibrary/TestPage/properties.xml" ]
}

processResources.dependsOn "fitNesseVersion", "compileBootstrap", "createUpdateLists"


task copyRuntimeLibs(type: Copy) {
	into 'lib'
	from configurations.runtime
}


task run(type: JavaExec) {
	dependsOn classes, copyRuntimeLibs
	classpath = sourceSets.main.runtimeClasspath
	main "fitnesseMain.FitNesseMain"
	args "-p", "8001", "-e", "0"
}


jar {
	dependsOn createUpdateLists
	into('Resources') {
		from('.') {
			include createUpdateLists.wikiFiles as String[]
		}
	}
	manifest {
		attributes("Main-Class": "fitnesseMain.FitNesseMain",
        "Implementation-Version": version)
	}
}


task standaloneJar(type: Jar) {
	dependsOn jar
	baseName = 'fitnesse'
	classifier = 'standalone'

	from {
		(configurations.compile - configurations.optional).collect { zipTree(it) }
	} {
		exclude 'META-INF/**'
	}
	from jar.outputs.files.collect {
		zipTree(it)
	}
	manifest {
		attributes("Main-Class": "fitnesseMain.FitNesseMain",
        "Implementation-Version": version)
	}
}


task javadocJar(type: Jar) {
	mustRunAfter check
	classifier = 'javadoc'
	from javadoc
}


task sourcesJar(type: Jar) {
	mustRunAfter check
	classifier = 'sources'
	from sourceSets.main.allSource
}


clean {
	delete 'lib'
}


def fetchAwsCredentials = {
	try {
		return new ProfileCredentialsProvider().credentials
	} catch (Exception e) {
		logger.debug('Unable to retrieve AWS credentials from profile, publishing to S3 is not available.', e)
		return null
	}
}
AWSCredentials awsCredentials = fetchAwsCredentials()


publishing {
	publications {
		FitNesseRelease(MavenPublication) {
			artifact standaloneJar
		}
	}

	repositories {
		maven {
			url 's3://fitnesse-packages'

			if (awsCredentials != null) {
				credentials(AwsCredentials) {
					accessKey = awsCredentials.AWSAccessKeyId
					secretKey = awsCredentials.AWSSecretKey
				}
			}
		}
	}
}

publish.dependsOn incrementVersion

// We cant' define wrapper version for subprojects
if (rootProject == 'fitnesse') {
	wrapper {
		gradleVersion = '4.3.1'
	}
}